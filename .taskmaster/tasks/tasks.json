{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Initialize Cloudflare Workers Project with Hono",
        "description": "Set up the base Cloudflare Workers project using Hono framework with TypeScript configuration, including wrangler.toml setup and KV namespace configuration",
        "details": "Execute: npm create hono@latest spotify-mcp-server\nInstall dependencies: npm install @modelcontextprotocol/sdk zod\nCreate wrangler.toml with KV namespace binding:\n```toml\nname = \"spotify-mcp-server\"\nmain = \"src/index.ts\"\ncompatibility_date = \"2024-01-01\"\n\n[[kv_namespaces]]\nbinding = \"OAUTH_KV\"\nid = \"your-kv-namespace-id\"\n\n[vars]\nCLIENT_ID = \"your-spotify-client-id\"\nCORS_ORIGIN = \"http://localhost:3000\"\n```\nCreate .dev.vars for local development with CLIENT_ID",
        "testStrategy": "Verify project builds with 'npm run build' and starts locally with 'wrangler dev'. Ensure TypeScript compilation succeeds and environment variables are accessible",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Implement PKCE OAuth Helper Functions",
        "description": "Create utility functions for OAuth PKCE flow including code verifier generation and code challenge creation using Web Crypto API",
        "details": "Create src/auth/pkce.ts:\n```typescript\nexport function generateCodeVerifier(): string {\n  const array = new Uint8Array(32);\n  crypto.getRandomValues(array);\n  return btoa(String.fromCharCode.apply(null, array))\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=/g, '');\n}\n\nexport async function generateCodeChallenge(verifier: string): Promise<string> {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(verifier);\n  const digest = await crypto.subtle.digest('SHA-256', data);\n  \n  return btoa(String.fromCharCode(...new Uint8Array(digest)))\n    .replace(/=/g, '')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_');\n}\n```",
        "testStrategy": "Write unit tests to verify code verifier is 43-128 characters, contains only URL-safe characters, and code challenge is properly SHA256 hashed and base64url encoded",
        "priority": "high",
        "dependencies": [1],
        "status": "in-progress",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Create Base Hono Application with Type Definitions",
        "description": "Set up the main Hono application with proper TypeScript bindings for Cloudflare Workers environment and CORS configuration",
        "details": "Update src/index.ts:\n```typescript\nimport { Hono } from 'hono';\nimport { cors } from 'hono/cors';\n\ntype Bindings = {\n  CLIENT_ID: string;\n  OAUTH_KV: KVNamespace;\n  CORS_ORIGIN: string;\n};\n\nconst app = new Hono<{ Bindings: Bindings }>();\n\napp.use('*', cors({\n  origin: (origin, c) => c.env.CORS_ORIGIN || '*',\n  allowMethods: ['GET', 'POST', 'OPTIONS'],\n  allowHeaders: ['Content-Type', 'Authorization'],\n  credentials: true\n}));\n\nexport default app;\n```",
        "testStrategy": "Test CORS headers are properly set by making OPTIONS requests. Verify environment bindings are accessible within route handlers",
        "priority": "high",
        "dependencies": [1],
        "status": "in-progress",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implement OAuth Initialization Endpoint",
        "description": "Create POST /oauth/init endpoint that generates OAuth state, code verifier, and returns Spotify authorization URL with PKCE parameters",
        "details": "Add to src/index.ts:\n```typescript\napp.post('/oauth/init', async (c) => {\n  const state = crypto.randomUUID();\n  const codeVerifier = generateCodeVerifier();\n  const codeChallenge = await generateCodeChallenge(codeVerifier);\n  \n  await c.env.OAUTH_KV.put(\n    `oauth:${state}`,\n    JSON.stringify({ codeVerifier, timestamp: Date.now() }),\n    { expirationTtl: 600 }\n  );\n  \n  const authUrl = new URL('https://accounts.spotify.com/authorize');\n  authUrl.searchParams.set('client_id', c.env.CLIENT_ID);\n  authUrl.searchParams.set('response_type', 'code');\n  authUrl.searchParams.set('redirect_uri', 'http://localhost:8787/oauth/callback');\n  authUrl.searchParams.set('state', state);\n  authUrl.searchParams.set('code_challenge', codeChallenge);\n  authUrl.searchParams.set('code_challenge_method', 'S256');\n  authUrl.searchParams.set('scope', 'user-read-private user-read-email');\n  \n  return c.json({ authUrl: authUrl.toString(), state });\n});\n```",
        "testStrategy": "Verify endpoint returns valid Spotify auth URL with all required PKCE parameters. Check KV storage contains state data with 10-minute TTL",
        "priority": "high",
        "dependencies": [2, 3],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Implement OAuth Callback Handler",
        "description": "Create POST /oauth/callback endpoint to exchange authorization code for access token using PKCE code verifier",
        "details": "Add to src/index.ts:\n```typescript\napp.post('/oauth/callback', async (c) => {\n  const { code, state } = await c.req.json();\n  \n  const stateData = await c.env.OAUTH_KV.get(`oauth:${state}`);\n  if (!stateData) {\n    return c.json({ error: 'Invalid or expired state' }, 400);\n  }\n  \n  const { codeVerifier } = JSON.parse(stateData);\n  \n  const tokenResponse = await fetch('https://accounts.spotify.com/api/token', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: new URLSearchParams({\n      grant_type: 'authorization_code',\n      code,\n      redirect_uri: 'http://localhost:8787/oauth/callback',\n      client_id: c.env.CLIENT_ID,\n      code_verifier: codeVerifier\n    })\n  });\n  \n  if (!tokenResponse.ok) {\n    return c.json({ error: 'Token exchange failed' }, 400);\n  }\n  \n  const tokens = await tokenResponse.json();\n  \n  await c.env.OAUTH_KV.put(\n    'spotify_token',\n    JSON.stringify(tokens),\n    { expirationTtl: tokens.expires_in }\n  );\n  \n  await c.env.OAUTH_KV.delete(`oauth:${state}`);\n  \n  return c.json({ success: true });\n});\n```",
        "testStrategy": "Test with mock authorization code to verify token exchange. Ensure state validation works and tokens are stored with proper expiration",
        "priority": "high",
        "dependencies": [4],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Implement MCP Initialize Method",
        "description": "Create core MCP endpoint handler with initialize method support following JSON-RPC 2.0 specification",
        "details": "Add to src/index.ts:\n```typescript\napp.post('/mcp', async (c) => {\n  const request = await c.req.json();\n  \n  if (request.method === 'initialize') {\n    return c.json({\n      jsonrpc: '2.0',\n      id: request.id,\n      result: {\n        protocolVersion: '2025-03-26',\n        serverInfo: {\n          name: 'spotify-mcp-server',\n          version: '1.0.0'\n        },\n        capabilities: {\n          tools: {}\n        }\n      }\n    });\n  }\n  \n  return c.json({\n    jsonrpc: '2.0',\n    id: request.id,\n    error: {\n      code: -32601,\n      message: 'Method not found'\n    }\n  });\n});\n```",
        "testStrategy": "Send initialize request with protocol version and verify response contains correct server info and capabilities structure",
        "priority": "high",
        "dependencies": [3],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement MCP Tools List Method",
        "description": "Add tools/list method to MCP endpoint that returns available Spotify search tool with proper JSON Schema",
        "details": "Update MCP handler in src/index.ts:\n```typescript\nif (request.method === 'tools/list') {\n  return c.json({\n    jsonrpc: '2.0',\n    id: request.id,\n    result: {\n      tools: [{\n        name: 'search-tracks',\n        description: 'Search for tracks on Spotify',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            query: {\n              type: 'string',\n              description: 'Search query'\n            },\n            limit: {\n              type: 'number',\n              description: 'Maximum results (1-50)',\n              default: 10,\n              minimum: 1,\n              maximum: 50\n            }\n          },\n          required: ['query']\n        }\n      }]\n    }\n  });\n}\n```",
        "testStrategy": "Verify tools/list returns correct tool metadata with valid JSON Schema. Test schema validation with various input combinations",
        "priority": "medium",
        "dependencies": [6],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Create Spotify Search Function",
        "description": "Implement searchTracks function that calls Spotify Web API search endpoint with proper authentication and error handling",
        "details": "Create src/spotify/search.ts:\n```typescript\nimport { Result, ok, err } from 'neverthrow';\n\nexport async function searchTracks(\n  query: string,\n  limit: number,\n  env: { OAUTH_KV: KVNamespace }\n): Promise<Result<any, string>> {\n  const tokenData = await env.OAUTH_KV.get('spotify_token');\n  if (!tokenData) {\n    return err('No access token available');\n  }\n  \n  const { access_token } = JSON.parse(tokenData);\n  \n  const response = await fetch(\n    `https://api.spotify.com/v1/search?` +\n    new URLSearchParams({\n      q: query,\n      type: 'track',\n      limit: limit.toString()\n    }),\n    {\n      headers: {\n        'Authorization': `Bearer ${access_token}`\n      }\n    }\n  );\n  \n  if (!response.ok) {\n    if (response.status === 401) {\n      return err('Token expired');\n    }\n    return err(`Spotify API error: ${response.status}`);\n  }\n  \n  const data = await response.json();\n  \n  const tracks = data.tracks.items.map(track => ({\n    id: track.id,\n    name: track.name,\n    artists: track.artists.map(a => a.name).join(', '),\n    album: track.album.name,\n    duration_ms: track.duration_ms,\n    preview_url: track.preview_url\n  }));\n  \n  return ok(tracks);\n}\n```",
        "testStrategy": "Mock Spotify API responses to test search functionality. Verify error handling for missing tokens, expired tokens, and API errors",
        "priority": "medium",
        "dependencies": [5],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Implement MCP Tools Call Method",
        "description": "Add tools/call method to handle search-tracks tool execution and return formatted results",
        "details": "Update MCP handler to include tools/call:\n```typescript\nif (request.method === 'tools/call') {\n  if (request.params.name === 'search-tracks') {\n    const { query, limit = 10 } = request.params.arguments;\n    \n    const result = await searchTracks(query, limit, c.env);\n    \n    if (result.isErr()) {\n      return c.json({\n        jsonrpc: '2.0',\n        id: request.id,\n        error: {\n          code: -32603,\n          message: result.error\n        }\n      });\n    }\n    \n    return c.json({\n      jsonrpc: '2.0',\n      id: request.id,\n      result: {\n        content: [{\n          type: 'text',\n          text: JSON.stringify(result.value, null, 2)\n        }]\n      }\n    });\n  }\n  \n  return c.json({\n    jsonrpc: '2.0',\n    id: request.id,\n    error: {\n      code: -32602,\n      message: 'Unknown tool'\n    }\n  });\n}\n```",
        "testStrategy": "Test tool execution with various search queries. Verify error responses for invalid tools and failed searches. Check response format matches MCP specification",
        "priority": "medium",
        "dependencies": [7, 8],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Add Token Refresh Mechanism",
        "description": "Implement automatic token refresh using refresh_token when access token expires",
        "details": "Create src/auth/refresh.ts:\n```typescript\nimport { Result, ok, err } from 'neverthrow';\n\nexport async function refreshAccessToken(\n  env: { CLIENT_ID: string; OAUTH_KV: KVNamespace }\n): Promise<Result<any, string>> {\n  const tokenData = await env.OAUTH_KV.get('spotify_token');\n  if (!tokenData) {\n    return err('No refresh token available');\n  }\n  \n  const { refresh_token } = JSON.parse(tokenData);\n  if (!refresh_token) {\n    return err('No refresh token in storage');\n  }\n  \n  const response = await fetch('https://accounts.spotify.com/api/token', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    body: new URLSearchParams({\n      grant_type: 'refresh_token',\n      refresh_token,\n      client_id: env.CLIENT_ID\n    })\n  });\n  \n  if (!response.ok) {\n    return err('Token refresh failed');\n  }\n  \n  const newTokens = await response.json();\n  \n  await env.OAUTH_KV.put(\n    'spotify_token',\n    JSON.stringify({\n      ...newTokens,\n      refresh_token: newTokens.refresh_token || refresh_token\n    }),\n    { expirationTtl: newTokens.expires_in }\n  );\n  \n  return ok(newTokens);\n}\n```\nIntegrate into searchTracks to retry on 401 errors",
        "testStrategy": "Test token refresh flow with expired tokens. Verify new tokens are stored correctly and search retry succeeds after refresh",
        "priority": "low",
        "dependencies": [8],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Create Comprehensive Error Handling",
        "description": "Implement centralized error handling for all endpoints with proper HTTP status codes and MCP error responses",
        "details": "Create src/errors.ts:\n```typescript\nexport class MCPError extends Error {\n  constructor(\n    public code: number,\n    message: string,\n    public data?: any\n  ) {\n    super(message);\n  }\n}\n\nexport function handleMCPError(error: unknown, requestId: string | number) {\n  if (error instanceof MCPError) {\n    return {\n      jsonrpc: '2.0',\n      id: requestId,\n      error: {\n        code: error.code,\n        message: error.message,\n        data: error.data\n      }\n    };\n  }\n  \n  return {\n    jsonrpc: '2.0',\n    id: requestId,\n    error: {\n      code: -32603,\n      message: 'Internal error',\n      data: error instanceof Error ? error.message : 'Unknown error'\n    }\n  };\n}\n```\nWrap all MCP handlers with try-catch blocks",
        "testStrategy": "Test error responses for various failure scenarios. Verify error codes follow JSON-RPC 2.0 specification",
        "priority": "low",
        "dependencies": [9],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Add Request Validation with Zod",
        "description": "Implement request validation schemas for all MCP methods and OAuth endpoints using Zod",
        "details": "Create src/schemas.ts:\n```typescript\nimport { z } from 'zod';\n\nexport const MCPRequestSchema = z.object({\n  jsonrpc: z.literal('2.0'),\n  id: z.union([z.string(), z.number()]),\n  method: z.string(),\n  params: z.any().optional()\n});\n\nexport const SearchToolSchema = z.object({\n  query: z.string().min(1),\n  limit: z.number().min(1).max(50).default(10)\n});\n\nexport const OAuthCallbackSchema = z.object({\n  code: z.string(),\n  state: z.string()\n});\n```\nUse schemas to validate all incoming requests",
        "testStrategy": "Test validation with invalid requests. Verify proper error messages for missing or invalid fields",
        "priority": "low",
        "dependencies": [11],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-07T17:56:37.338Z",
      "updated": "2025-07-07T18:29:39.159Z",
      "description": "Tasks for master context"
    }
  }
}
